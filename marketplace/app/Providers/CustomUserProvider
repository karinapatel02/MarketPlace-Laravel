<?php

namespace App\Providers;

use App\Models\MavUser;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Contracts\Auth\UserProvider;
use Illuminate\Support\Facades\Hash;

class CustomUserProvider implements UserProvider
{

    public function retrieveById($uid)
    {
        $qry = MavUser::where('uid', '=', $uid);

        if ($qry->count() > 0) {
            $user = $qry->select('uid', 'username', 'password', 'fname', 'lname', 'email', 'phone_number', 'role_type')->first();
            return $user;
        }
        return null;
    }


    public function retrieveByToken($uid, $token)
    {
        // TODO: Implement retrieveByToken() method.
        $qry = MavUser::where('uid', '=', $uid);

        if ($qry->count() > 0) {
            $user = $qry->select('uid', 'username', 'password', 'fname', 'lname', 'email', 'phone_number', 'role_type')->first();
            return $user;
        }
        return null;
    }

    public function updateRememberToken(Authenticatable $user, $token)
    {
        $user->setRememberToken($token);
    }

    public function retrieveByCredentials(array $credentials)
    {
        $qry = MavUser::where('email', '=', $credentials['email']);

        if ($qry->count() > 0) {
            $user = $qry->select('uid', 'username', 'password', 'fname', 'lname', 'email', 'phone_number', 'role_type')->first();
            return $user;
        }

        return null;
    }

    public function validateCredentials(Authenticatable $user, array $credentials)
    {
        if ($user->email == $credentials['email'] && Hash::check($credentials['password'], $user->getAuthPassword())) {
            return true;
        }
        return false;
    }
}
